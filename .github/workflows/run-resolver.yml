name: Run Resolver

on:
  workflow_dispatch:
    inputs:
      date:
        description: 'Date for the release'
        required: false  # Make this optional
        default: ''
  workflow_call:
    inputs:
      date:
        description: 'Date for the release'
        required: false
        type: string

jobs:
  run-docker-compose:
    name: London Highest Temperature for ${{ inputs.date || github.event.inputs.date || format('2 days ago ({0})', format(fromJSON('"${{ steps.date.outputs.date }}"'), 'YYYY-MM-DD')) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Get date for display
        id: date
        if: ${{ inputs.date == '' && github.event.inputs.date == '' }}
        run: echo "date=$(date -d '2 days ago' +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Calculate default DATE (2 days ago)
        if: ${{ (github.event.inputs.date == '' || github.event.inputs.date == null) && (inputs.date == '' || inputs.date == null) }}
        run: |
          echo "DATE=$(date -d '2 days ago' +'%Y-%m-%d')" >> $GITHUB_ENV
        shell: bash

      - name: Set DATE from workflow_dispatch input
        if: ${{ github.event.inputs.date != '' && github.event.inputs.date != null }}
        run: echo "DATE=${{ github.event.inputs.date }}" >> $GITHUB_ENV
        
      - name: Set DATE from workflow_call input
        if: ${{ inputs.date != '' && inputs.date != null }}
        run: echo "DATE=${{ inputs.date }}" >> $GITHUB_ENV

      - name: Populate .env file from secrets
        run: |
          echo "DATE=${{ env.DATE }}" > ./london-resolver/.env
          echo "GEOJSON_URL=${{ secrets.GEOJSON_URL }}" >> ./london-resolver/.env
          echo "BASIN_NAMESPACE=${{ secrets.BASIN_NAMESPACE }}" >> ./london-resolver/.env
          echo "BASIN_API_BASE_URL=${{ secrets.BASIN_API_BASE_URL }}" >> ./london-resolver/.env
          echo "IPFS_GATEWAY_URL=${{ secrets.IPFS_GATEWAY_URL }}" >> ./london-resolver/.env
          echo "PINATA_JWT=${{ secrets.PINATA_JWT }}" >> ./london-resolver/.env
          echo "BETTING_PLATFORM=${{ secrets.BETTING_PLATFORM }}" >> ./london-resolver/.env
          echo "BET_NAME=${{ secrets.BET_NAME }}" >> ./london-resolver/.env
          echo "CONTRACT_ADDRESS=${{ secrets.CONTRACT_ADDRESS }}" >> ./london-resolver/.env
          echo "RPC_URL=${{ secrets.RPC_URL }}" >> ./london-resolver/.env
          echo "PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}" >> ./london-resolver/.env
          echo "GROUP_ID=${{ secrets.GROUP_ID }}" >> ./london-resolver/.env
        env:
          GEOJSON_URL: ${{ secrets.GEOJSON_URL }}
          BASIN_NAMESPACE: ${{ secrets.BASIN_NAMESPACE }}
          BASIN_API_BASE_URL: ${{ secrets.BASIN_API_BASE_URL }}
          IPFS_GATEWAY_URL: ${{ secrets.IPFS_GATEWAY_URL }}
          PINATA_JWT: ${{ secrets.PINATA_JWT }}
          BETTING_PLATFORM: ${{ secrets.BETTING_PLATFORM }}
          BET_NAME: ${{ secrets.BET_NAME }}
          CONTRACT_ADDRESS: ${{ secrets.CONTRACT_ADDRESS }}
          RPC_URL: ${{ secrets.RPC_URL }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          GROUP_ID: ${{ secrets.GROUP_ID }}

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Run Docker Compose
        run: docker-compose -f ./london-resolver/docker-compose.yml up --build

      - name: Create directories for output
        run: mkdir -p ./london/highest-temperature-daily

      - name: Copy output file from container
        run: docker cp london-runner:/app/temperature_results_${{ env.DATE }}.json ./london/highest-temperature-daily/result_${{ env.DATE }}.json

      - name: Archive resolution output file
        uses: actions/upload-artifact@v4
        with:
          name: london_highest_temperature_daily_${{ env.DATE }}
          path: ./london/highest-temperature-daily/result_${{ env.DATE }}.json
